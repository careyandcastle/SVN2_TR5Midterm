@using TR5MidTerm.Models.TR5MidTermViewModels;
@model 商品檔DisplayViewModel
@using TscLibCore.Commons;
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@using TscLibCore.Modules;
@using TscLibCore.Authority;
@using System.ComponentModel.DataAnnotations;
@using TableFieldDescDictionary =
    System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.Dictionary<System.String, System.String>>;
@{
    //產生欄位名稱中文定義
    var tablesField = ViewBag.TableFieldDescDict;
    var masterTableDescHTML = Html.Raw(CreateTableFieldsDescription.TableFieldDescToHTML(tablesField, TableType.MasterTable));


    var requestToken = Html.Raw(Antiforgery.GetAndStoreTokens(Context).RequestToken);
    UserAccountForSession sess = HttpContextAccessor.HttpContext.Session.GetObject<UserAccountForSession>(nameof(UserAccountForSession));

    @*ViewData["Title"] = (string)sess.GetUserAuthority()["procname"];*@
    ViewData["Title"] = "TR5MIDTERM_03 商品檔維護";
    var canCreate = Html.Raw(sess.AddYn).ToString().ToLower();
    var canUpdate = Html.Raw(sess.UpdateYn).ToString().ToLower();
    var canDelete = Html.Raw(sess.DeleteYn).ToString().ToLower();
    var canQuery = Html.Raw(sess.QueryYn).ToString().ToLower();
    var canExport = Html.Raw(sess.ExportYn).ToString().ToLower();

    var dateTimePropertyName = new
    {
        MasterTable = new Dictionary<string, string>(),
        DetailTable = new Dictionary<string, string>(),
    };
    var dateType = (datetime: "datetime", date: "date");
    foreach (var propName in ((TableFieldDescDictionary)tablesField)[TableType.MasterTable.ToString()])
    {
        var prop = typeof(商品檔DisplayViewModel).GetProperty(propName.Key);
        Type propertyType = prop.PropertyType;
        Type typeWithNullable = Nullable.GetUnderlyingType(propertyType);
        propertyType = typeWithNullable ?? propertyType;
        if (propertyType == typeof(DateTime))
        {
            var att = (DataTypeAttribute)prop.GetCustomAttributes(typeof(DataTypeAttribute), false).FirstOrDefault();

            var dateTimeFormat = dateType.datetime;

            if (att != null && ((DataTypeAttribute)att).DataType == DataType.Date)
            {
                dateTimeFormat = dateType.date;
            }

            dateTimePropertyName.MasterTable.Add(propName.Key, dateTimeFormat);
        }
    }
}

<h1 class="mt-1">@ViewData["Title"]</h1>
<div id="tr5midtermcontroller-index">
    <table-component id="tr5midtermcontroller-master-table"
                     @*sticky-header-height="642px"*@
                     ref="tr5midtermcontroller-master-table">
        <template #default="slot">
            <!--OP Button-->
            <b-row class="mb-2">
                <b-col>
                    @*<b-button v-if="slot.data.operatePermissions.canCreate" v-b-modal.master-table-create-multi-modal class="mr-1" variant="detail3">多筆建立</b-button>*@
                    <b-button v-if="slot.data.operatePermissions.canCreate" v-b-modal.master-table-create-modal class="mr-1" variant="detail3">建立</b-button>
                    @*<b-button v-if="slot.data.operatePermissions.canUpdate" v-b-modal.master-table-edit-modal @@click="slot.data.isNewItemOnTop = false" :disabled="!slot.data.selectedMasterRow?.param" class="mr-1" variant="detail3">編輯</b-button>
                        <b-button v-if="slot.data.operatePermissions.canDelete" v-b-modal.master-table-del-modal @@click="slot.data.isNewItemOnTop = false" :disabled="!slot.data.selectedMasterRow" class="mr-1" variant="detail3">刪除</b-button>*@
                    <b-button v-if="slot.data.operatePermissions.canDelete" v-b-modal.master-table-edit-modal @@click="slot.data.isNewItemOnTop = false" :disabled="!slot.data.selectedMasterRow?.params?.canClickEditOrDelete || slot.data.params.data.isBusy" class="mr-1" variant="detail3">
                        <span v-if="slot.data.params.data.isBusy" class="spinner-overlay">
                            <b-spinner small type="border" class="custom-spinner"></b-spinner>
                        </span>編輯
                    </b-button>
                    <b-button v-if="slot.data.operatePermissions.canDelete" v-b-modal.master-table-del-modal @@click="slot.data.isNewItemOnTop = false" :disabled="!slot.data.selectedMasterRow?.params?.canClickEditOrDelete || slot.data.params.data.isBusy" class="mr-1" variant="detail3">
                        <span v-if="slot.data.params.data.isBusy" class="spinner-overlay">
                            <b-spinner small type="border" class="custom-spinner"></b-spinner>
                        </span>刪除
                    </b-button>
                    @*<b-button v-if="slot.data.operatePermissions.canExport" class="mr-1" variant="detail3" v-on:click="slot.data.onDataExport" isWaitting="!isWaitting">匯出</b-button>*@
                    <b-button v-if="slot.data.operatePermissions.canQuery" v-b-modal.master-table-query-modal class="mr-1" variant="detail3">進階查詢</b-button>
                    <!--Master OP Page-->
                    <fetched-page-modal url="CreateMulti" id="master-table-create-multi-modal" title="批次新增單檔資料" :classes="['max-width-90-pt']"></fetched-page-modal>
                    <fetched-page-modal url="Create" id="master-table-create-modal" title="新增單檔資料"></fetched-page-modal>
                    <fetched-page-modal url="Edit" :param="slot.data.selectedMasterRow?.params" id="master-table-edit-modal" title="更新資料"></fetched-page-modal>
                    <fetched-page-modal url="Delete" :param="slot.data.selectedMasterRow?.params" id="master-table-del-modal" title="刪除操作"></fetched-page-modal>
                    <query-page-modal id="master-table-query-modal" title="進階查詢" :queryfields="slot.data.mTableFields" :is_filtered="slot.data.isFiltered"></query-page-modal>
                </b-col>
            </b-row>
            <b-row class="mb-2">
                <b-col cols="8">
                    <multi-input :schema="slot.data.params.data.querySchema"
                                 :select-options="slot.data.params.data.querySelectOptions"
                                 :value-obj="slot.data.params.data.queryData"
                                 v-on:field-change="slot.data.queryChanged"
                                 v-on:reset-all="slot.data.queryResetAll"
                                 v-on:filter-click="slot.data.queryFilterClicked">
                    </multi-input>
                </b-col>
                <b-col cols="2">

                    <sticky-fields-selector :field-key-desc="slot.data.mTableFieldDesc"
                                            selected-indic-limit=3
                                            ref="stickySelector">
                    </sticky-fields-selector>
                </b-col>

                <b-col cols="2">
                    <b-button class="ml-2" variant="detail3"
                              v-show="slot.data.$parent?.$refs?.stickySelector?.selected"
                              @@click="()=>slot.data.$parent.$refs.stickySelector.selectedClear()">
                        取消凍結
                    </b-button>
                </b-col>
            </b-row>

        </template>
    </table-component>
</div>

@section Scripts {
    <script>
        (function () {
            //#region 主檔
            //主檔 Table 欄位名稱中文定義
            const _mTableFieldDesc = @masterTableDescHTML;

            //主檔 Table Key 欄位名稱
            const masterTableKeys = [
                '事業',
                '單位',
                '部門',
                '分部',
                '商品編號',
            ];

            //主檔 data source 傳給 Server的參數
            let dsMasterProviderParams = {
                searchBy: null
            };

            const dateTimePropertyName = @Json.Serialize(@dateTimePropertyName);

            //主檔 data source
            const _dsMasterProvider = async function (ctx) {
                try {
                    dsMasterProviderParams.pageSize = ctx.perPage;
                    dsMasterProviderParams.pageIndex = ctx.currentPage;
                    dsMasterProviderParams.sortBy = ctx.sortBy;
                    dsMasterProviderParams.isDesc = ctx.sortDesc || false;
                    let response = await axios.post('GetDataPost', dsMasterProviderParams, {
                        headers: {
                            'content-type': 'application/json',
                            "RequestVerificationToken": "@requestToken"
                        }
                    });

                    this.totalRows = response.data.total;

                    let latestData = TSCC.Utility.Table.GetDataSource.call(this, masterTableKeys, response, ctx);

                    //轉成台灣時間
                    latestData.forEach(data => {
                        Object.entries(dateTimePropertyName[TableType.MasterTable]).forEach(([propName, dateType]) => {
                            let dateISOstring = data[propName];
                            if (data.hasOwnProperty(propName) && dateISOstring) {
                                data[propName] = new Date(dateISOstring).to_zhTW_string(dateType);
                            }
                        });
                    });

                    return latestData;
                } catch (error) {
                    debugger;
                    console.log(error);
                    return [];
                }
            }


            //點擊時發生呼叫事件
            const _onMasterRowSelect = function (rowData) {
                var selectParam = {
                    事業: null,
                    單位: null,
                    部門: null,
                    分部: null,
                    商品編號: null,
                };

                if (rowData.length > 0) {
                    let data = rowData[0];
                    selectParam.事業 = this.事業 = data.事業;
                    selectParam.單位 = this.單位 = data.單位;
                    selectParam.部門 = this.部門 = data.部門;
                    selectParam.分部 = this.分部 = data.分部;
                    selectParam.商品編號 = this.商品編號 = data.商品編號;
                    this.selectedMasterRow.params = selectParam;

                    //傳送給server時, 轉ISO時間
                    Object.entries(dateTimePropertyName[TableType.MasterTable]).forEach(([propName, dateType]) => {
                        let dateLocalestring = data[propName];
                        if (selectParam.hasOwnProperty(propName) && data.hasOwnProperty(propName) && dateLocalestring) {
                            selectParam[propName] = this[propName] = Date.parse_zhTW_string(dateLocalestring).toISOString();
                        }
                    });


                    //#region 自定義:按鈕判斷
                    Vue.set(params.data, 'isBusy', true);
                    console.log("是否busy?", params.data.isBusy);
                    this.$forceUpdate();

                    @* axios.post('/TR5MidTerm02/CheckButtonPermissions', this.selectedMasterRow.params) *@
                    @*debugger;*@
                    axios.post('/TR5MidTerm03/CheckButtonPermissions', selectParam)
                        .then(res => {
                            @*debugger;*@
                        // ✅ 將所有權限狀態灌入畫面綁定來源
                        Object.entries(res.data).forEach(([key, val]) => {
                            Vue.set(params.data, key, val);
                        });
                        Object.assign(this.selectedMasterRow.params, {
                            canClickEditOrDelete: res.data.canClickEditOrDelete
                        });
                        Vue.set(params.data, 'isBusy', false);
                        this.$forceUpdate();
                        console.log("是否busy?", params.data.isBusy);
                        console.log('CheckButtonPermissions 成功', res.data);
                    })
                        .catch(err => {
                            console.error('CheckButtonPermissions發生錯誤：', err);
                            Vue.set(params.data, 'isBusy', false);
                            this.$forceUpdate();
                        });
                }
                else {
                    console.warn("[DEBUG] 主檔未選擇任何列！");
                    this.isBusy = false; // 顯示 Loading 遮罩
                    console.log("busy?", this.isBusy);
                }

                //#endregion

            }

            const _assignFilter = function (filterData) {
                let shouldRefresh = this.isFiltered || (filterData && Object.keys(filterData).length > 0);
                this.isFiltered = !!filterData && Object.keys(filterData).length > 0;
                dsMasterProviderParams.searchBy = filterData;
                shouldRefresh && this.refreshMasterTable();
            }

            //匯出ods
            const _onDataExport = async function () {
                let response = await axios.post('@Url.Action("Export","TR5MidTermController")', dsMasterProviderParams, {
                    responseType: 'blob',
                    headers: {
                        RequestVerificationToken: "@requestToken"
                    },
                });

                const url = window.URL.createObjectURL(new Blob([response.data], {
                    type: response.headers['content-type']
                }));
                const link = document.createElement('a');
                link.href = url;
                link.setAttribute('download', 'TR5MidTermController.ods');
                document.body.appendChild(link);
                link.click();
            }
            //#endregion
            //#region filter
            //覆寫欄位尋找與清除事件
            const _onFilterValueUpdate = function (event) {
                const keyCodeAllowRegExp = /\b(8|4[6-9]|5[0-7]|6[5-9]|[7|8]\d|90|9[6-9]|10[0-5]|10[7-9]|11[0-1]|18[7-9]|13)\b/;
                if (typeof(event) == 'KeyboardEvent' && keyCodeAllowRegExp.test(event.keyCode.toString()) == false) return;
                let filterDataObj = {};
                for (let inputRef in this.$parent.$refs) {
                    let [inputInst, val] = [this.$parent.$refs[inputRef][0], ""];
                    if (inputRef.includes('filter_input_') && (val = inputInst.vModelValue).length > 0) {
                        filterDataObj[inputInst.name] = { condit: 'eq', value: val};
                    }
                }
                _assignFilter.call(this, filterDataObj);
            }

            const _onAdvanceSearch = function(qParams) {
                let filterDataObj = {};
                for (const [key, searchParam] of Object.entries(qParams)) {
                    console.log(`${key}: ${searchParam.condit},  ${searchParam.value}`);
                    filterDataObj[key] = searchParam;
                }
                _assignFilter.call(this, filterDataObj);
            }

            const _onCleanFilter = function () {
                dsMasterProviderParams.searchBy = null;
                for (let inputRef in this.$parent.$refs) {
                    let inputInst = this.$parent.$refs[inputRef][0];
                    if (inputRef.includes('filter_input_')) {
                        inputInst.vModelValue = "";
                        inputInst.$el.value = "";
                    }
                }
                _assignFilter.call(this, null);
            }

            const _onFiltered = function (event) {
                console.log("_onFiltered customize: ", event);
            }

            const _serverReturned = function (retData) {
                ShowValidateResult(retData, { filter: '#ModelErrorDiv' });
                console.log("serverReturned customize: ", retData);
            }

            const _onBeforeMount = function (tableInstance) {
                //tableInstance.stickyHeaderHeight = `${200}px`
                console.log("onBeforeMount customize");
            }

            const _onMounted = function (tableInstance) {
                console.log("_onMounted customize");
            }
            //#endregion
            //#region 自訂query
            const _querySelectOptions = Vue.reactive({

                事業: ConvertSelectListItemsToBFormSelectOptions(@Json.Serialize(ViewBag.事業選單)),
                單位: ConvertSelectListItemsToBFormSelectOptions(@Json.Serialize(ViewBag.單位選單)),
                部門: ConvertSelectListItemsToBFormSelectOptions(@Json.Serialize(ViewBag.部門選單)),
                分部: ConvertSelectListItemsToBFormSelectOptions(@Json.Serialize(ViewBag.分部選單)),
                @*刪除註記: [
                    { text: '不限', value: '%' },
                     { text: '是', value: "true"},
                     { text: '否', value: "false"}],*@
            });

            const _querySchema = [
                { key: '事業', label: '事業', type: 'select' },
                { key: '單位', label: '單位', type: 'select' },
                { key: '部門', label: '部門', type: 'select' },
                { key: '分部', label: '分部', type: 'select' },
                @*{ key: '刪除註記', label: '刪除註記', type: 'radio', useBoostrapButtons: true }, // slot 會自訂成 button group*@

            ];
            //#region 連動選單onChanged
            const _queryChanged = function (key, value) {

                if (key == '事業') {
                    onBizSelectChanged();
                }
                else if (key == '單位') {
                    // 當單位變更時，可以更新部門選項
                    onDepSelectChanged();
                }
                else if (key == '部門') {
                    onBranchSelectChanged();
                }
            };
            const onBizSelectChanged = function () {
                debugger;
    $.get('@Url.Action("GetDepartmentSelectList", "TR5MidTerm02")',
        { Biz: _queryData.事業 },
        (data) => {
            _querySelectOptions.單位 = ConvertSelectListItemsToBFormSelectOptions(data);
            _queryData.單位 = '';
            _querySelectOptions.部門 = [];
            _queryData.部門 = '';
            _querySelectOptions.分部 = [];
            _queryData.分部 = '';
        }
    );
};
            const onDepSelectChanged = function () {
    $.get('@Url.Action("GetDivisionSelectList", "TR5MidTerm02")',
        {
            Biz: _queryData.事業,
            DepNo: _queryData.單位
        },
        (data) => {
            _querySelectOptions.部門 = ConvertSelectListItemsToBFormSelectOptions(data);
            _queryData.部門 = '';
            _querySelectOptions.分部 = [];
            _queryData.分部 = '';
        }
    );
};
            const onBranchSelectChanged = function () {
    $.get('@Url.Action("GetBranchSelectList", "TR5MidTerm02")',
        {
            Biz: _queryData.事業,
            DepNo: _queryData.單位,
            DivNo: _queryData.部門
        },
        (data) => {
            _querySelectOptions.分部 = ConvertSelectListItemsToBFormSelectOptions(data);
            _queryData.分部 = '';
        }
    );
};
            //#endregion


            //當按下查詢按鈕
            const _queryFilterClicked = function () {
                _onAdvanceSearch.call(this, getQueryCondits.call(this));
            };

            const getQueryCondits = function () {
                let filterDataObj = {};

                this.params.data.querySchema.forEach((item) => {
                    let val = this.params.data.queryData[item.key];
                    @*debugger;*@
                    if (val === null || val === '' || val === '%' || val === 'TS' || val.length === 0) {
                        return;
                    }

                    filterDataObj[item.key] = { condit: 'eq', value: val };
                });
                return filterDataObj;
            }
            //按下清除鈕會觸發的function。清除下拉選單內容、回復預設選項，並重新讀取資料。
            const _queryResetAll = function () {
                _queryData.事業 = '';
                _queryData.單位 = '';
                _queryData.部門 = '';
                _queryData.分部 = '';
                @*_queryData.刪除註記 = '%';*@

                _onAdvanceSearch.call(this, getQueryCondits.call(this));
            }
            //給default value
            const _queryData = Vue.reactive({
                事業: '',
                單位: '',
                部門: '',
                分部: '',
                @*刪除註記: '%',*@

            });


            //#endregion
            //#region 注入data
            let _opPermiss = { canCreate: @canCreate, canUpdate: @canUpdate, canDelete: @canDelete, canQuery: @canQuery, canExport: @canExport };
            const params = { data: null, methods: null };
            params.data = {
                mTableFieldDesc: _mTableFieldDesc,
                operatePermissions: _opPermiss,
                isFiltered: false,
                isNewItemOnTop: true,
                事業: '',
                單位: '',
                部門: '',
                分部: '',
                商品編號: '',
                //#region 自定義query注入
                querySchema: _querySchema,
                querySelectOptions: _querySelectOptions,
                queryData: _queryData,
                //#endregion
                //#region 自訂義按鈕判斷
                isBusy: false,
                anClickEditOrDelete: false,
                //#endregion
            }
            //#endregion
            //#region 注入methods
            params.methods = {
                //系統覆寫
                dsMasterProvider: _dsMasterProvider,
                onMasterRowSelect: _onMasterRowSelect,
                serverReturned: _serverReturned,
                onFiltered: _onFiltered,
                onBeforeMount: _onBeforeMount,
                onMounted: _onMounted,
                //User自訂
                onFilterValueUpdate: _onFilterValueUpdate,
                onAdvanceSearch: _onAdvanceSearch,
                onCleanFilter: _onCleanFilter,
                onDataExport: _onDataExport,
                //#region 自定義query注入
                queryChanged: _queryChanged,
                queryResetAll: _queryResetAll,
                queryFilterClicked: _queryFilterClicked,
                //#endregion
            };
            //#endregion
            //掛載Table
            TSC_NS.CreateVue(params).$mount('#tr5midtermcontroller-index');
        })();
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}